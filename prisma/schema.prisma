generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SiteRole {
  ADMIN
  USER
}

enum RelationRoleLocation {
  OWNER
  MANAGER
  TEAMMEMBER
  VIEWER
}

enum RelationRoleGottesdienst {
  TECHNIK_BILD
  TECHNIK_TON
  TECHNIK_STREAM
  PASTOR
  MODERATOR
  MUSIK
  KINDERHUTTE
  KINDERTREFF
  TEENETALK
  BISTRO
  PUTZTEAM
  TEAM
}

enum Status {
  PENDING
  APPROVED
  DECLINED
}

model User {
  id              String              @id @unique @default(cuid())
  email           String              @unique
  name            String?
  password        String
  role            SiteRole            @default(USER)
  locations       user_location[]
  Gottesdienste   Gottesdienst_User[]
  deleted         Boolean             @default(false)
  access_requests access_request[]
  teams           team[]
  createdAt       DateTime            @default(now())
  abwesenheiten   abwesenheit[]
}

model abwesenheit {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  dateFrom DateTime
  dateTo   DateTime
  reason   String?
}

model Location {
  id              String           @id @default(cuid())
  name            String           @unique
  address         String
  Gottesdienst    Gottesdienst[]
  Users           user_location[]
  access_codes    access_code[]
  access_requests access_request[]
}

model Gottesdienst {
  id                String              @id @default(cuid())
  locationId        String
  location          Location            @relation(fields: [locationId], references: [id])
  anlass            String?
  dateFrom          DateTime            @default(now())
  dateUntill        DateTime            @default(now())
  abendmahl         Boolean             @default(false)
  kommentar         String?
  externerPastor    String?
  thema             String?
  textstelle        String?
  kontakt           String?
  Gottesdienst_User Gottesdienst_User[]
  findetStatt       Boolean             @default(true)
}

model Gottesdienst_User {
  id             String                   @id @default(cuid())
  gottesdienstId String
  gottesdienst   Gottesdienst             @relation(fields: [gottesdienstId], references: [id])
  userId         String
  user           User                     @relation(fields: [userId], references: [id])
  role           RelationRoleGottesdienst @default(TEAM)
}

model user_location {
  id         String               @id @default(cuid())
  userId     String
  locationId String
  user       User                 @relation(fields: [userId], references: [id])
  location   Location             @relation(fields: [locationId], references: [id])
  relation   RelationRoleLocation @default(VIEWER)
}

model access_code {
  id         String    @id @default(cuid())
  locationId String
  location   Location  @relation(fields: [locationId], references: [id])
  validuntil DateTime?
  maxuses    Int?
  used       Int       @default(0)
}

model access_request {
  id         String               @id @default(cuid())
  userId     String
  locationId String
  user       User                 @relation(fields: [userId], references: [id])
  location   Location             @relation(fields: [locationId], references: [id])
  message    String?
  approved   Boolean              @default(false)
  approvedBy String?
  approvedAt DateTime?
  relation   RelationRoleLocation @default(VIEWER)
  status     Status               @default(PENDING)
}

model team {
  id     String                   @id @default(cuid())
  userId String
  user   User                     @relation(fields: [userId], references: [id])
  name   RelationRoleGottesdienst @default(TEAM)
}
